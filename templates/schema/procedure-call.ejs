<%
const { utils, route, config, apiClassName } = it;
const { _, pascalCase } = utils;
const routeDocs = includeFile("../route-docs", { config, route, utils });

const functionName = route.request.method + pascalCase(`${route.request.path
        .split('/')
        .map((segment) =>
                segment.includes('${') ? `By_${segment.replace(/[${}]/g, '')}` : segment
        )
        .join('_')}`);

const responseType = route.responseBodyInfo?.success?.type || 'any';
const pathParams = _.values(route.request.parameters);
const hasPathParams = pathParams.length > 0;
const payload = route.request.payload;
const query = route.request.query;

const queryTypeName = query ? `${pascalCase(route.routeName.usage)}QueryParams` : null;

const generateParams = (params, query, payload) => {
    const paramList = [
        ...(params ? params.map(param => `${param.name}${param.optional ? '?' : ''}: ${param.type}`) : []),
        ...(query ? [`params${query.optional ? '?' : ''}: ${queryTypeName || query.type}`] : []),
        ...(payload ? [`data${payload.optional ? '?' : ''}: ${payload.type}`] : [])
    ];

    const omitTypes = [
        ...(query ? ["'searchParams'"] : []),
        ...(payload ? ["'json'"] : [])
    ];

    const optionsType = omitTypes.length > 0
            ? `Omit<Options, ${omitTypes.join(' | ')}>`
            : 'Options';

    paramList.push('kyInstance?: KyInstance', `options?: ${optionsType}`);
    return paramList.join(', ');
};

const cleanDtoName = (name) => {
    const match = name.match(/\(([^)]+)\)/);
    const result = match ? match[1] : name;
    return result.charAt(0).toLowerCase() + result.slice(1);
};

const isValidType = (type) => {
  const invalidTypes = ['void', 'any', 'null', 'undefined', 'object'];
  const invalidPattern = new RegExp(invalidTypes.join('|'), 'i');
  return type && !invalidPattern.test(type);
};

const schema = {
    request: {
        name: payload && isValidType(payload.type) ? `${cleanDtoName(payload.type)}Schema` : null,
        isList: payload?.type?.includes('[]')
    },
    response: {
        name: route.response?.type && isValidType(route.response.type) ? `${cleanDtoName(route.response.type)}Schema` : null,
        isList: route.response?.type.includes('[]')
    }
}
%>

/**
<%~ routeDocs.lines %> */
async <%= functionName %>(<%~ generateParams(pathParams, query, payload) %>) {

<%~ schema.request.name ? `validateSchema(${schema.request.name}, data);` : '' %>

const instance = kyInstance ?? this.instance;
<% if (query) { %>
    const urlSearchParams = <%= apiClassName %>Api.createSearchParams(params);
<% } %>

const response = await instance.<%= route.request.method.toLowerCase() %><<%= responseType %>>(`<%= route.request.path.replace(/{/g, '{').replace(/}/g, '}').slice(1,) %>`,{
<% if (query) { %>
    searchParams: urlSearchParams,
<% } %>
<% if (payload) { %>
    json: data,
<% } %>
...options,
}).json();


<% if (schema.response.name) { %>
<%~ schema.response.isList ? `response.data?.forEach(res => validateSchema(${schema.response.name}, res));` : `validateSchema(${schema.response.name}, response);` %>
<% } %>


return response;
}
