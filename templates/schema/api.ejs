<%
const { utils, route, config, modelTypes } = it;
const { _, pascalCase, require } = utils;
const apiClassName = pascalCase(route.moduleName);
const routes = route.routes;
const dataContracts = _.map(modelTypes, "name");
%>

import type { KyInstance, Options } from 'ky';
import type { ZodSchema } from 'zod';
import { validateSchema } from '@/shared/api/utils.gen';

<%~ includeFile('./schema-import.ejs', { ...it }) %>
<%~ includeFile('../dto-import.ejs', { ...it }) %>

export class <%= apiClassName %>Api {
private readonly instance: KyInstance;

constructor(instance: KyInstance) {
this.instance = instance;
}

static createSearchParams(
  params?: Record<string, string | number | boolean | Array<string | number | boolean>>
): URLSearchParams {
  const urlSearchParams = new URLSearchParams();

  if (params) {
    Object.entries(params)
      .filter(([, value]) => value !== undefined)
      .forEach(([key, value]) => {
        const values = Array.isArray(value) ? value : [value];
        values.forEach((v) => urlSearchParams.append(key, v.toString()));
      });
  }

  return urlSearchParams;
}

<% for (const route of routes) { %>
<%~ includeFile('./procedure-call.ejs', { ...it, route, apiClassName }) %>
<% } %>
}
