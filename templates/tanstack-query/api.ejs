<%
/** 
* @description Tanstack Query - Query 생성 템플릿 입니다.
*/

const { utils, route, modelTypes, config } = it;
const { pascalCase, internalCase: camelCase, _: lodash } = utils;
const { moduleName, routes } = route;

// 유틸리티 함수들
const removeBracket = (type) => type.replace(/[()]/g, '');

const cleanupType = (type) => {
    return type
      // 배열 타입 주변의 불필요한 괄호 제거
      .replace(/\(([A-Za-z0-9_]+)\)(\[\])/g, '$1$2')
      
      // 속성 뒤의 불필요한 공백 제거 (콤마 앞의 공백 제거)
      .replace(/\s+,/g, ',')
      
      // 배열 타입 뒤의 콤마와 공백 제거
      .replace(/(\[\]),\s*/g, '$1')
      
      // 객체 끝의 불필요한 공백 제거
      .replace(/\s+}/g, '}')
      
      // 객체 시작의 불필요한 공백 제거
      .replace(/{\s+/g, '{')
      
      // 연속된 공백 제거
      .replace(/\s{2,}/g, ' ');
  };

// 경로 관련 함수들
const getFunctionName = ({ request: { method, path } }) => {
  const segments = path.split('/').map(segment => {
    if (segment.includes('${')) {
      return `By_${segment.replace(/[${}]/g, '')}`;
    }
    return segment;
  });
  
  return `${method}${pascalCase(segments.join('_'))}`;
};

const buildQueryKey = ({ path }) => {
  return path
    .split('/')
    .filter(segment => segment && segment !== 'api')
    .map(segment => {
      if (segment.match(/\${/)) {
        return segment.replace(/[${}]/g, '').toUpperCase().replace(/-/g, '_');
      }
      return segment.toUpperCase().replace(/-/g, '_');
    })
    .join('_');
};

const buildPathQueryKey = ({ path }) => {
  return path
    .split('/')
    .filter(segment => segment && segment !== 'api')
    .map(segment => {
      if (segment.match(/\${/)) {
        return segment.replace(/[${}]/g, '').replace(/-/g, '_');
      }
      return `'${segment.replace(/-/g, '_')}'`;
    });
};

// 요청 파라미터 생성 함수
const getRequestParams = ({ parameters = [], query, payload, routeName }) => {
  const queryParamsDto = query ? `${pascalCase(routeName.usage)}QueryParams` : '';

  const paramsWithTypes = lodash.compact([
    ...parameters.map(({ name, type, optional }) => 
      `${name}${optional ? '?' : ''}: ${removeBracket(type)}`
    ),
    queryParamsDto ? `params${query.optional ? '?' : ''}: ${queryParamsDto}` : '',
    payload ? `body${payload.optional ? '?' : ''}: ${removeBracket(payload.type)}` : '',
  ]).join(', ');

  const paramsWithoutTypes = lodash.compact([
    ...parameters.map(({ name, optional }) => `${name}${optional ? '?' : ''}`),
    query ? 'params' : '',
    payload ? 'body' : '',
  ]).join(', ');

  return {
    withTypes: paramsWithTypes,
    withoutTypes: paramsWithoutTypes
  };
};

// 쿼리 설정 생성
const queryConfigs = routes
  .filter(({ request: { method } }) => method === 'get')
  .map(route => {
    const functionName = getFunctionName(route);
    const { request, response } = route;
    const queryKeyName = buildQueryKey(request);
    const pathQueryKey = buildPathQueryKey(request);
    
    const { withTypes: requestParams, withoutTypes: requestParamsWithoutTypes } = 
      getRequestParams({
        ...request,
        routeName: route.routeName
      });

    const queryKeyParams = [
      ...pathQueryKey,
      request.query ? 'params' : null,
      request.payload ? 'data' : null,
    ].filter(Boolean).join(', ');

    return {
      moduleName,
      route,
      functionName: camelCase(functionName),
      hookName: camelCase(`use${pascalCase(functionName)}Query`),
      suspenseHookName: camelCase(`use${pascalCase(functionName)}SuspenseQuery`),
      responseDto: cleanupType(response.type),
      requestParams,
      requestParamsWithoutTypes,
      queryKeyName: `GET_${queryKeyName}`,
      queryKey: `(${requestParams}) => [${queryKeyParams}]`,
    };
  });
%>

<% if (queryConfigs?.length) { %>
import { useQuery, useSuspenseQuery } from '@tanstack/react-query';
import type {
  DefaultError,
  UseQueryOptions,
  UseSuspenseQueryOptions,
} from '@tanstack/react-query';
<%~ includeFile('../dto-import.ejs', { ...it }) %>

import { <%~ moduleName %>Api } from './instance';

export const <% ~moduleName.toUpperCase() %>_QUERY_KEY = {
<% for (const queryConfig of queryConfigs) { %>
  <% ~queryConfig.queryKeyName %>: <% ~queryConfig.queryKey %>,
<% } %>
}

const queries = {
<% for (const queryConfig of queryConfigs) { %>
  <% ~queryConfig.functionName %>: (<% ~queryConfig.requestParams %>) => ({
    queryKey: <% ~moduleName.toUpperCase() %>_QUERY_KEY.<% ~queryConfig.queryKeyName %>(<% ~queryConfig.requestParamsWithoutTypes %>),
    queryFn: () => <% ~moduleName %>Api.<% ~queryConfig.functionName %>(<% ~queryConfig.requestParamsWithoutTypes %>)
  }),
<% } %>
}

// ---------------------- Query ------------------------------
<% for (const queryConfig of queryConfigs) {
  const routeDocs = includeFile("../route-docs.ejs", { config, route: queryConfig.route, utils });
%>
/**
<%~ routeDocs.lines %>
 */
export const <%~ queryConfig.hookName %> = <TData = <%~ queryConfig.responseDto %>>(
  <%~ queryConfig.requestParams ? `${queryConfig.requestParams},`:''%>
  options?: Omit<UseQueryOptions<<%~ queryConfig.responseDto %>, DefaultError, TData>, 'queryKey' | 'queryFn'>
) => {
  return useQuery({
    ...queries.<% ~queryConfig.functionName %>(<% ~queryConfig.requestParamsWithoutTypes %>),
    ...options,
  });
}

<% } %>

// ------------------ Suspense Query --------------------------
<% for (const queryConfig of queryConfigs) {
  const routeDocs = includeFile("../route-docs.ejs", { config, route: queryConfig.route, utils });
%>
/**
<%~ routeDocs.lines %>
 */
export const <%~ queryConfig.suspenseHookName %> = <TData = <%~ queryConfig.responseDto %>>(
  <%~ queryConfig.requestParams ? `${queryConfig.requestParams},`:''%>
  options?: Omit<UseSuspenseQueryOptions<<%~ queryConfig.responseDto %>, DefaultError, TData>, 'queryKey' | 'queryFn'>
) => {
  return useSuspenseQuery({
    ...queries.<% ~queryConfig.functionName %>(<% ~queryConfig.requestParamsWithoutTypes %>),
    ...options,
  });
}

<% } %>
<% } %>
