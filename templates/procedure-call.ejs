<%
const { utils, route, config, apiClassName } = it;
const { _, pascalCase } = utils;
const routeDocs = includeFile("./route-docs", { config, route, utils });

const functionName = route.request.method + pascalCase(`${route.request.path
        .split('/')
        .map((segment) =>
                segment.includes('${') ? `By_${segment.replace(/[${}]/g, '')}` : segment
        )
        .join('_')}`);

const responseType = route.responseBodyInfo?.success?.type || 'any';
const pathParams = _.values(route.request.parameters);
const hasPathParams = pathParams.length > 0;
const payload = route.request.payload;
const query = route.request.query;
const headers = route.request.headers;
const headerName = headers ? `${pascalCase(route.routeName.usage)}Headers` : null;

const queryTypeName = query ? `${pascalCase(route.routeName.usage)}QueryParams` : null;

const generateParams = (params, query, payload, headerName) => {
    const paramList = [
        ...(params ? params.map(param => `${param.name}${param.optional ? '?' : ''}: ${param.type}`) : []),
        ...(query ? [`params${query.optional ? '?' : ''}: ${queryTypeName || query.type}`] : []),
        ...(payload ? [`data${payload.optional ? '?' : ''}: ${payload.type}`] : [])
    ];

    const omitTypes = [
        ...(query ? ["'searchParams'"] : []),
        ...(payload ? ["'json'"] : []),
        ...(headerName ? ["'headers'"] : [])
    ];

    const optionsType = omitTypes.length > 0
            ? `Omit<Options, ${omitTypes.join(' | ')}>${headerName ? ` & { headers: ${headerName} }` : ''}`
            : 'Options';

    paramList.push('kyInstance?: KyInstance', `options?: ${optionsType}`);
    return paramList.join(', ');
};
%>

/**
<%~ routeDocs.lines %> */
<%= functionName %>(<%~ generateParams(pathParams, query, payload, headerName) %>) {
const instance = kyInstance ?? this.instance;
<% if (query) { %>
    const urlSearchParams = <%= apiClassName %>Api.createSearchParams(params);
<% } %>

return instance.<%= route.request.method.toLowerCase() %><<%= responseType %>>(`<%= route.request.path.replace(/{/g, '{').replace(/}/g, '}').slice(1,) %>`,{
<% if (query) { %>
    searchParams: urlSearchParams,
<% } %>
<% if (payload) { %>
    json: data,
<% } %>
...options,
}).json();
}
