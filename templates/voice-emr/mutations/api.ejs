<%
const { utils, route, modelTypes, config } = it;
const { _, pascalCase } = utils;
const { moduleName, routes } = route;

const camelCase = (str) => str.replace(/([-_][a-zA-z])/g, (group) => group.toUpperCase().replace('-', '').replace('_', ''))
        .replace(/By([A-Z])/g, (group) => `By${group.slice(2)}`);

const getFunctionName = ({ request: { method, path } }) =>
        `${method}${pascalCase(path
                .split('/')
                .filter(segment => segment && segment !== 'api' && segment !== 'v1')
                .map(segment =>
                        segment.includes('${')
                                ? `By_${segment.replace(/[${}]/g, '')}`
                                : segment
                )
                .join('_'))}`;

const removeBracket = (type) => type.replace(/[()]/g, '')

const getRequestParams = ({ parameters = [], query, payload, routeName }) => {
    const queryParamsDto = query ? `${pascalCase(routeName.usage.replace('ApiV1', ''))}QueryParams` : '';

    return {
        withTypes: [
            ...parameters.map(({ name, type, optional }) => `${name}${optional ? '?' : ''}: ${removeBracket(type)}`),
            queryParamsDto ? `params${query.optional ? '?' : ''}: ${queryParamsDto}` : '',
            payload ? `body${payload.optional ? '?' : ''}: ${removeBracket(payload.type.replace('ApiV1', ''))}` : '',
        ].filter(Boolean).join(', '),
        withoutTypes: [
            ...parameters.map(({ name, optional }) => `${name}${optional ? '?' : ''}`),
            payload ? 'body' : '',
            query ? `params` : ''
        ].filter(Boolean).join(', ')
    } };

const buildMutationKeyName = ({ path, method }) =>
        method.toUpperCase()+'_'+path
               .split('/')
               .filter(segment => segment && segment !== 'api' && segment !== 'v1')
               .map(segment =>
                       segment.match(/\${/)
                               ? segment.replace(/[${}]/g, '').toUpperCase()
                               : segment.toUpperCase()
               )
                .join('_')

const buildPathMutationKey = ({ path }) =>
        path
                .split('/')
                .filter(segment => segment && segment !== 'api' && segment !== 'v1')
                .map(segment =>
                        `'${segment.replace(/[${}]/g, '')}'`)

const mutationConfigs = routes
        .filter(({ request: { method } }) => method === 'post' || method === 'patch' || method === 'put' || method === 'delete')
        .map(route => {
            const functionName = getFunctionName(route);
            const { request, response } = route;
            const mutationKeyName = buildMutationKeyName(request);
            const mutationKey = buildPathMutationKey(request);
            const { withTypes: requestParams, withoutTypes: requestParamsWithoutTypes } = getRequestParams({
                ...request,
                routeName: route.routeName
            });

            return {
                moduleName,
                route,
                functionName: camelCase(functionName),
                hookName: `use${pascalCase(functionName)}Mutation`,
                responseDto: removeBracket(response.type),
                hasVariables: requestParams.length > 0,
                requestParams,
                requestParamsWithoutTypes,
                mutationKeyName,
                mutationKey: `[${mutationKey.filter(Boolean).join(', ')}]`,
            };
        });

if (mutationConfigs.length > 0) {
    const variableTypes = mutationConfigs
            .filter(config => config.hasVariables)
            .map(config => `type T${pascalCase(config.functionName)}Variables = { ${config.requestParams} };`)
            .join('\n');

const dataContracts = _.map(modelTypes, "name").map(name => name.replace('ApiV1', ''));
const queryParamsDto = routes.filter(v=>v.specificArgs.query).map(v=>`${pascalCase(v.routeName.original.replace('ApiV1', ''))}QueryParams`)
%>

<% if (mutationConfigs?.length) { %>

import {
DefaultError,
useMutation,
UseMutationOptions,
useQueryClient,
} from '@tanstack/react-query';

import { 
  <%~ modelTypes.map(v=>v.name) %>,
  <%~ routes
    .filter(route => route.query || (mutationConfigs || []).some(config => config.requestParams.includes('params')))
    .map(route => `${pascalCase(route.routeName.usage)}QueryParams`)
    .filter((value, index, self) => self.indexOf(value) === index) // 중복 제거
    .join(',\n  ') 
%>
  <%~ dataContracts.join(", ") %>
  <%~ queryParamsDto.join(", ") %>
} from '@/shared/api';

import { <%= pascalCase(moduleName) %>Api } from '.';

export const <% ~moduleName.toUpperCase() %>_MUTATION_KEY = {
<% for (const config of mutationConfigs) { %>
    <% ~config.mutationKeyName %>: <% ~config.mutationKey %>,
<% } %>
};

const mutations = {
<% for (const config of mutationConfigs) { %>
    <%= config.functionName.replace('ApiV1', '') %>: () => ({
    mutationFn: <% if (config.hasVariables) { %>(variables: T<%= pascalCase(config.functionName) %>Variables) => {
    const { <%= config.requestParamsWithoutTypes %> } = variables;
    return <%= pascalCase(moduleName) %>Api.<%= config.functionName.replace('ApiV1', '') %>(<%= config.requestParamsWithoutTypes %>);
    }<% } else { %>() => <%= pascalCase(moduleName) %>Api.<%= config.functionName.replace('ApiV1', '') %>()<% } %>,
    mutationKey: <% ~moduleName.toUpperCase() %>_MUTATION_KEY.<% ~config.mutationKeyName %>,
    }),
<% } %>
};

<% for (const mutationConfig of mutationConfigs) {
    const routeDocs = includeFile("../route-docs.ejs", { config, route: mutationConfig.route, utils });
%>

/**
<%~ routeDocs.lines %>
 */
export const <%= mutationConfig.hookName %> = (
options?: Omit<
UseMutationOptions<<%= mutationConfig.responseDto %>, DefaultError, <%= mutationConfig.hasVariables ? `T${pascalCase(mutationConfig.functionName)}Variables` : 'void' %>>,
'mutationFn'|'mutationKey'
>
) => {
return useMutation({
...mutations.<%= mutationConfig.functionName %>(),
...options,
});
};

<% } %>

<%~ variableTypes %>

<%
} else { %>
    <% /* mutationConfigs가 비어있을 때는 아무것도 출력되지 않습니다 */ %>
<% } %>
<% } %>
