<%
const { utils, route, config } = it;
const { _, pascalCase } = utils;
const routeDocs = includeFile("./route-docs", { config, route, utils });

const functionName = route.request.method + pascalCase(`${route.request.path
        .split('/')
        .map((segment) =>
                segment.includes('${') ? `By_${segment.replace(/[${}]/g, '')}` : segment
        )
        .filter(segment => !['api', 'v1'].includes(segment.toLowerCase()))
        .join('_')}`);

const responseType = route.responseBodyInfo?.success?.type || 'any';
const pathParams = _.values(route.request.parameters);
const hasPathParams = pathParams.length > 0;
const payload = route.request.payload;
const query = route.request.query;

const queryTypeName = query ? `${pascalCase(route.routeName.usage.replace('ApiV1', ''))}QueryParams` : null;

const generateParams = (params, query, payload) => {
    const paramList = [
        ...(params ? params.map(param => `${param.name}${param.optional ? '?' : ''}: ${param.type}`) : []),
        ...(payload ? [`payload${payload.optional ? '?' : ''}: ${payload.type.replace('ApiV1', '')}`] : []),
        ...(query ? [`params${query.optional ? '?' : ''}: ${queryTypeName || query.type}`] : [])
    ];

    const omitTypes = [
        ...(query ? ["'searchParams'"] : []),
        ...(payload ? ["'json'"] : [])
    ];

    return paramList.join(', ');
};
const path = route.request.path.replace(/{/g, '{').replace(/}/g, '}').slice(1,).replace(/^api\/v1\//, '')
const unAuthorizedPathList = ['auth/primary', 'auth/secondary', 'users/email', "users/${userId}/password"]
const isSignUp = route.request.method.toLowerCase() === 'post' && path === 'users'
const isUnAuthorized = unAuthorizedPathList.some(p => path.includes(p)) || isSignUp
%>

/**
<%~ routeDocs.lines %> */
<%= functionName %>: async (<%~ generateParams(pathParams, query, payload) %>) => {
const response = await <%= isUnAuthorized ? 'unAuthorizedAxiosInstance' : 'axiosInstance' %>.<%= route.request.method.toLowerCase() %><<%= responseType %>>(`<%= path %>`,
<% if (payload) { %>
    <%= route.request.method === 'delete' ? '{ data: payload }' : 'payload' %>,
<% } %>
<% if (query) { %>
    { params },
<% } %>
)
return response.data;
},
